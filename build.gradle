group 'test.test'
version '1.0.0'

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.4.2.RELEASE")
    }
}

ext {
    scalaMajorVersion = '2.11'
    scalaVersion = '2.11.7'
    sparkVersion = '2.1.0'
}

apply plugin: 'scala'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

idea {
    module {
        inheritOutputDirs = true
    }
}

springBoot {
    mainClass = 'bynull.spark.example.Spark'
}

dependencies {
    compile "org.scala-lang:scala-library:${scalaVersion}"

    compile "org.apache.spark:spark-core_${scalaMajorVersion}:${sparkVersion}"
    compile "org.apache.spark:spark-sql_${scalaMajorVersion}:${sparkVersion}"
    compile "org.apache.spark:spark-streaming_${scalaMajorVersion}:${sparkVersion}"

    compile "com.fasterxml.jackson.module:jackson-module-scala_${scalaMajorVersion}:2.8.4"
    compile 'org.codehaus.janino:commons-compiler:2.7.6'


    //compile 'ch.qos.logback:logback-classic:1.2.1'

    testCompile "org.scala-lang:scala-library:${scalaVersion}"
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile "org.scalatest:scalatest_${scalaMajorVersion}:3.0.1"
}

test {
    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running ${descriptor}...")
    }

    afterTest { desc, result ->
        println "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
}
